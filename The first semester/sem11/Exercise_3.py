import random
def quicksort(nums):
    assert all(isinstance(item, int | float) for item in nums), 'the entered data is incorrect'
    if len(nums) <= 1:
        return nums
    else:
        q = random.choice(nums)
        s_nums = []
        m_nums = []
        e_nums = []
        for n in nums:
            if n < q:
                s_nums.append(n)
            elif n > q:
                m_nums.append(n)
            else:
                e_nums.append(n)
        return quicksort(s_nums) + e_nums + quicksort(m_nums)
    
nums1 = [1, 3, 6, 8, 12, 5, 7]
nums2 = [1, 3, 6, 4,  8, 12 ,3, 3 ,2 , 5, 7, 4]
nums3 = [1, 3.254, 6, 8.25, 8,5.125,5, 12, 3,  5.251, 7]
nums4 = [1, 8 , -7, -8, 4, 6, 2.25, -1.26, 7, 4, 13]
nums5 = [1, 3.254, 6, 8.25, 8,5.125,5, 12, 3,  5.251, 7,'chomik zasadził bobrycha', 1, 8 , -7, -8, 4, 6, 2.25, -1.26, 7, 4, 13]
nums6 = [100,20,30,40,50,60,70,80,90,100,200,300,400,500,600,700,800,900,1000,2000,3000,4000,5000,6000,7000,8000,9000,10000,2000,3000,4000,5000,6000,7000,8000,9000,10000,2000,3000,4000,5000,6000,7000,8000,9000,10000,2000,3000,4000,5000,6000,7000,8000,9000,10000,2000,3000,4000,5000,6000,7000,8000,9000,10000,2000,3000,4000,5000,6000,7000,8000,9000,10000,2000,3000,4000,5000,6000,7000,8000,9000,10000,2000,3000,4000,5000,6000,7000,8000,9000,10000,2000,3000,4000,5000,6000,7000,8000,9000,10000,2000,3000,4000,5000,6000,7000,8000,9000,10000,2000,3000,4000,5000,6000,7000,8000,9000,10000,2000,3000,4000,5000,6000,7000,8000,9000,10000,2000,3000,4000,5000,6000,7000,8000,9000,10000,2000,3000,4000,5000,6000,7000,8000,9000,10000,2000,3000,4000,5000,6000,7000,8000,9000,10000,2000,3000,4000,5000,6000,7000,8000,9000,10000,2000,3000,4000,5000,6000,7000,8000,9000,10000,2000,3000,4000,5000,6000,7000,8000,9000,10000,2000,3000,4000,5000,6000,7000,8000,9000,10000,2000,3000,4000,5000,6000,7000,8000,9000,10000,2000,3000,4000,5000,6000,7000,8000,9000,10000,2000,3000,4000,5000,6000,7000,8000,9000,10000,2000,3000,4000,5000,6000,7000,8000,9000,10000,2000,3000,4000,5000,6000,7000,8000,9000,10000,2000,3000,4000,5000,6000,7000,8000,9000,10000,2000,3000,4000,5000,6000,7000,8000,9000,10000,2000,3000,4000,5000,6000,7000,8000,9000,10000,2000,3000,4000,5000,6000,7000,8000,9000,10000,2000,3000,4000,5000,6000,7000,8000,9000,10000,2000,3000,4000,5000,6000,7000,8000,9000,10000,2000,3000,4000,50]
nums7 = [[1, 3.254, 6, 8.25, 8,5.125,5, 12, 3,  5.251, 7,['chomik'], ['zasadził'], ['bobrycha'], 1, 8 , -7, -8, 4, 6, 2.25, -1.26, 7, 4, 13]]

res1 = [1, 3, 5, 6, 7, 8, 12]
res2 = [1, 2, 3, 3, 3, 4, 4, 5, 6, 7, 8, 12]
res3 = [1, 3, 3.254, 5, 5.125, 5.251, 6, 7, 8, 8.25, 12]
res4 = [-8, -7, -1.26, 1, 2.25, 4, 4, 6, 7, 8, 13]
res6 = [20, 30, 40, 50, 50, 60, 70, 80, 90, 100, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 7000, 7000, 7000, 7000, 7000, 7000, 7000, 7000, 7000, 7000, 7000, 7000, 7000, 7000, 7000, 7000, 7000, 7000, 7000, 7000, 7000, 7000, 7000, 7000, 7000, 7000, 7000, 7000, 7000, 7000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 9000, 9000, 9000, 9000, 9000, 9000, 9000, 9000, 9000, 9000, 9000, 9000, 9000, 9000, 9000, 9000, 9000, 9000, 9000, 9000, 9000, 9000, 9000, 9000, 9000, 9000, 9000, 9000, 9000, 9000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000]

import unittest


class TestSimple(unittest.TestCase):
    def test_quicksort(self):
        self.assertEqual(quicksort(nums1), res1, f"it should be {res1}")


class TestDuplicateNumbers(unittest.TestCase):
    def test_quicksort(self):
        self.assertEqual(quicksort(nums2), res2, f"it should be {res2}")
    
class TestFractionalNumbers(unittest.TestCase):
    def test_quicksort(self):
        self.assertEqual(quicksort(nums3), res3, f"it should be {res3}")
        
class TestNegativeNumbers(unittest.TestCase):
    def test_quicksort(self):
        self.assertEqual(quicksort(nums4), res4, f"it should be {res4}")
        
class TestLargeArray(unittest.TestCase):
    def test_quicksort(self):
        self.assertEqual(quicksort(nums6), res6, f"it should be {res6}")
        


class TestIncorrectData1(unittest.TestCase):
    def test_quicksort(self):
        with self.assertRaises(AssertionError):
            quicksort(nums5)
        
        
class TestIncorrectData2(unittest.TestCase):
    def test_quicksort(self):
        with self.assertRaises(AssertionError):
            quicksort(nums7)
        

        
